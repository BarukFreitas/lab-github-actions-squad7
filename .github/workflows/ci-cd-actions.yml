name: CI/CD ServeRest

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Cache Maven
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

  health-check:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Rodar testes de Health Check
        run: |
          cd projeto-rest-aula03
          mvn test -Dgroups=HealthCheck

      - name: Salvar resultados de testes
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-health-check
          path: projeto-rest-aula03/allure-results

  contrato:
    needs: health-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Rodar testes de contrato (JSON Schema)
        run: |
          cd projeto-rest-aula03
          mvn test -Dgroups=Contrato

      - name: Salvar resultados de testes
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-contrato
          path: projeto-rest-aula03/allure-results

  funcional:
    needs: contrato
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Rodar testes funcionais com JUnit 5 + Rest Assured
        run: |
          cd projeto-rest-aula03
          mvn test -Dgroups=Funcional

      - name: Salvar resultados de testes
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-funcional
          path: projeto-rest-aula03/allure-results

  relatorio:
    needs: funcional
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar relatório de testes em XML
        run: |
          cd projeto-rest-aula03
          mvn surefire-report:report-only

      - name: Converter XML para JSON
        run: |
          sudo apt-get install -y xmlstarlet jq
          xmlstarlet sel -t -m "//testng-results" -v "@passed" -o "," -v "@failed" -o "," -v "@total" projeto-rest-aula03/target/surefire-reports/testng-results.xml > projeto-rest-aula03/test-results.json

      - name: Verificar se test-results.json foi gerado
        run: |
          ls -la projeto-rest-aula03
          cat projeto-rest-aula03/test-results.json || echo "Arquivo test-results.json não encontrado!"

      - name: Extract summary
        run: |
          TEST_RESULTS="projeto-rest-aula03/test-results.json"
          if [ -f "$TEST_RESULTS" ]; then
            IFS=',' read PASSED FAILED TOTAL < "$TEST_RESULTS"
          else
            PASSED=0
            FAILED=0
            TOTAL=0
          fi
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV

  discord:
    needs: relatorio
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Enviar notificação para o Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_SECRET_URL }}
          REPORT_URL: ${{ secrets.REPORT_URL }}
          RUN_NUMBER: ${{ github.run_number }}
          PIPELINE_NAME: "CI/CD ServeRest"
          PASSED: ${{ env.PASSED }}
          FAILED: ${{ env.FAILED }}
          TOTAL: ${{ env.TOTAL }}
        run: |
          # Variáveis
          BASE_URL="${REPORT_URL}/${RUN_NUMBER}/index.html"
          TITLE="${PIPELINE_NAME}"
          PASSED="${PASSED}"
          FAILED="${FAILED}"
          TOTAL="${TOTAL}"

          # Formatar a cor do embed com base nos testes passados
          if [ "$PASSED" -eq "$TOTAL" ]; then
            COLOR="00FF00"  # Verde
          else
            COLOR="FF0000"  # Vermelho
          fi

          # Enviar o webhook para o Discord
          curl -X POST -H "Content-Type: application/json" \
          -d '{
                "username": "CI/CD Bot",
                "embeds": [
                  {
                    "title": "'"$TITLE"'",
                    "color": '"$COLOR"',
                    "url": "'"$BASE_URL"'",
                    "fields": [
                      {
                        "name": "Quantidade de Testes",
                        "value": "'"$TOTAL"'",
                        "inline": false
                      },
                      {
                        "name": "Passaram",
                        "value": "'"$PASSED"'",
                        "inline": true
                      },
                      {
                        "name": "Falharam",
                        "value": "'"$FAILED"'",
                        "inline": true
                      }
                    ]
                  }
                ]
              }' \
          $DISCORD_WEBHOOK_URL
